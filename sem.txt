#expr parse tree
#Write a program to associate postfix notation of the given arithmetic expression with every node in the parse tree.

class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def checkOperator(op):
    return op in ['+', '-', '*', '/']

def constructTree(postFix):
    stack = []
    for token in postFix.split():
        if not checkOperator(token):
            stack.append(TreeNode(token))
        else:
            if len(stack) < 2:
                raise ValueError("Invalid postfix expression")
            rNode = stack.pop()
            lNode = stack.pop()
            opNode = TreeNode(token)
            opNode.left = lNode
            opNode.right = rNode
            stack.append(opNode)
    if len(stack) != 1:
        raise ValueError("Invalid postfix expression")
    return stack[0]

def parseTree(node, level=0, position="Root"):
    if node is not None:
        print('  ' * level + position + ": " + str(node.value))
        parseTree(node.left, level + 1, "Left")
        parseTree(node.right, level + 1, "Right")

def inToPostfix(expression):
    prec = {'+': 1, '-': 1, '*': 2, '/': 2}

    output = []
    opStack = []

    for token in expression.split():
        if token.isdigit():
            output.append(token)
        elif token == '(':
            opStack.append(token)
        elif token == ')':
            while opStack and opStack[-1] != '(':
                output.append(opStack.pop())
            opStack.pop()  
        else: 
            while opStack and prec.get(token, 0) <= prec.get(opStack[-1], 0):
                output.append(opStack.pop())
            opStack.append(token)
    while opStack:
        output.append(opStack.pop())
    return ' '.join(output)

infix = input("Enter arithmetic expr: ")
postfix = inToPostfix(infix)
parse_tree = constructTree(postfix)
print("Parse tree:")
parseTree(parse_tree)

#-----------------------------------------------

#2 Write a program to associate three address code of arithmetic expression (integer data types
#and mixed data types) with each node in the parse tree.
'''
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.children = []

    def add_child(self, child):
        self.children.append(child)

    def __str__(self):
        return str(self.value)
    
class ThreeADC:
    def __init__(self):
        self.code = []
        self.tC = 0
        self.root = None

    def generate_temp(self):
        temp = "t"+str(self.tC)
        self.tC += 1
        return temp

    def generate_code(self, expr):
        lines=[]
        stack = []
        tokens = expr.split()
        for token in tokens:
            if token.isalnum():  
                stack.append(token)
            else: 
                op2 = stack.pop()
                op1 = stack.pop()
                temp = self.generate_temp()
                self.code.append((token, op1, op2, temp))
                stack.append(temp)
        for line in self.code:
            lines.append(line)
        return lines
            
    def generate_parse_tree(self, code):
        self.root = self.tree(code)

    def tree(self, code):
        stack = []
        for op, op1, op2, temp in code:
            node = TreeNode((op, temp))
            if op1.isdigit() or op1.isalpha():
                node.add_child(TreeNode(op1))
            else:
                node.add_child(stack.pop())

            if op2.isdigit() or op2.isalpha():
                node.add_child(TreeNode(op2))
            else:
                node.add_child(stack.pop())
            stack.append(node)
        return stack.pop()

    def print_tree(self, node, level=0):
        if node:
            print("  " * level + str(node))
            for child in node.children:
                self.print_tree(child, level + 1)
            
def inToPostfix(expression):
    prec = {'+': 1, '-': 1, '*': 2, '/': 2}
    output = []
    opStack = []
    for token in expression.split():
        if token.isdigit():
            output.append(token)
        elif token == '(':
            opStack.append(token)
        elif token == ')':
            while opStack and opStack[-1] != '(':
                output.append(opStack.pop())
            opStack.pop()  
        else: 
            while opStack and prec.get(token, 0) <= prec.get(opStack[-1], 0):
                output.append(opStack.pop())
            opStack.append(token)
    while opStack:
        output.append(opStack.pop())
    return ' '.join(output)

infix = "3 + 4 * ( 2 - 1 )"
postfix = inToPostfix(infix)

code = ThreeADC()

lines=code.generate_code(postfix)
code.generate_parse_tree(lines)
code.print_tree(code.root)

'''
#-------------------------------------------

#Write a program to associate three address code of Boolean expressions (involving relational
#operators, “and”, ”or” and not) with each node in the parse tree.
'''
def inToPostfix(expression):
    prec = {'NOT': 3, 'AND': 2, 'OR': 1}
    associativity = {'NOT': 'right', 'AND': 'left', 'OR': 'left'}
    output = []
    opStack = []
    tokens = expression.split()
    for token in tokens:
        if token not in ['NOT','AND','OR']: 
            output.append(token)
        else:
            while (opStack and
                   prec.get(token, 0) <= prec.get(opStack[-1], 0) and
                   (associativity[token] == 'left' or prec[token] < prec[opStack[-1]])):
                output.append(opStack.pop())
            opStack.append(token)
    while opStack:
        output.append(opStack.pop())
    return ' '.join(output)
    
class ThreeADC:
    def __init__(self):
        self.root = None
        self.code = []
        self.tC = 0
        
    def getTempvar(self):
        temp = "t"+str(self.tC)
        self.tC += 1
        return temp

    def parseTree(self, expr):
        stack = []
        relOp = expr.split()
        for token in relOp:
            if token == 'NOT':  
                op = stack.pop()
                temp = self.getTempvar()
                self.code.append(('NOT', op, temp))
                stack.append(temp)
            elif token in ['AND', 'OR']:  
                op2 = stack.pop()
                op1 = stack.pop()
                temp = self.getTempvar()
                self.code.append((token, op1, op2, temp))
                stack.append(temp)
            else:  
                stack.append(token)
        for l in self.code:
            print(l)

expr = "NOT b AND c AND d"
postfix = inToPostfix(expr)
code = ThreeADC()
code.parseTree(postfix)
'''
#----------------------------------------------------

#triple repr

class exprConv: 
    def __init__(self, capacity):
        self.top = -1
        self.capacity = capacity
        self.array = []
        self.output = []
        self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3}
     
    def isEmpty(self):
        return True if self.top == -1 else False
     
    def peek(self):
        return self.array[-1]
     
    def pop(self):
        if not self.isEmpty():
            self.top -= 1
            return self.array.pop()
        else:
            return "$"
     
    def push(self, op):
        self.top += 1
        self.array.append(op) 
 
    def isOperand(self, ch):
        return ch.isalpha()
 
    def notGreater(self, i):
        try:
            a = self.precedence[i]
            b = self.precedence[self.peek()]
            return True if a <= b else False
        except KeyError: 
            return False
             

    def infixToPostfix(self, exp):

        for i in exp:
            if self.isOperand(i):
                self.output.append(i)
            elif i == '(':
                self.push(i)
 
            elif i == ')':
                while( (not self.isEmpty()) and self.peek() != '('):
                    a = self.pop()
                    self.output.append(a)
                if (not self.isEmpty() and self.peek() != '('):
                    return -1
                else:
                    self.pop()
 
            else:
                while(not self.isEmpty() and self.notGreater(i)):
                    self.output.append(self.pop())
                self.push(i) 
        while not self.isEmpty():
            self.output.append(self.pop())
        #print("Postfix notation")
        #print ("".join(self.output))
        return "".join(self.output)
    

def ThreeADC(exp):
        tempSp = ''
        for i in exp:
            if i != " ":
                tempSp += i

        exp = tempSp
        stack = []
        x = 1
        obj = exprConv(len(exp))
        postfix = obj.infixToPostfix(exp)
        for i in postfix:
            if i.isalpha() or i.isdigit():
                stack.append(i)
            elif i == '-':
                op1 = stack.pop()
                print("t(",x,")","=",i,op1)
                stack.append("t(%s)" %x)
                x = x+1
                if stack != []:
                    op2 = stack.pop()
                    op1 = stack.pop()
                    print("t(",x,")","=",op1,"+",op2)
                    stack.append("t(%s)" %x)
                    x = x+1
            elif i == '=':
                    op2 = stack.pop()
                    op1 = stack.pop()
                    print(op1,i,op2)

            else:
                op1 = stack.pop()
                if stack !=[]:
                        op2 = stack.pop()
                        print("t(",x,")","=",op2,i,op1)
                        stack.append("t(%s)" %x)
                        x = x+1
def Quadruple(exp):
        tempSp = ''
        for i in exp:
            if i != " ":
                tempSp += i

        exp = tempSp
        stack = []
        x = 1
        obj = exprConv(len(exp))
        postfix = obj.infixToPostfix(exp)
        print("{0:} | {1:} | {2:} | {3:}".format('op','arg1','arg2','result'))
        for i in postfix:
            if i.isalpha() or i.isdigit():
                stack.append(i)
            elif i == '-':
                op1 = stack.pop()
                stack.append("t(%s)" %x)
                print("{0:^4s} | {1:^4s} | {2:^4s}|{3:4s}".format(i,op1,""," t(%s)" %x))
                x = x+1
                if stack != []:
                    op2 = stack.pop()
                    op1 = stack.pop()
                    print("{0:^4s} | {1:^4s} | {2:^4s}|{3:4s}".format("+",op1,op2," t(%s)" %x))
                    stack.append("t(%s)" %x)
                    x = x+1
            elif i == '=':
                    op2 = stack.pop()
                    op1 = stack.pop()
                    print("{0:^4s} | {1:^4s} | {2:^4s}|{3:4s}".format(i,op2,"",op1))
            else:
                op1 = stack.pop()
                op2 = stack.pop()
                print("{0:^4s} | {1:^4s} | {2:^4s}|{3:4s}".format(i,op2,op1," t(%s)" %x))
                stack.append("t(%s)" %x)
                x = x+1


def Triple(exp):
    tempSp = ''
    for i in exp:
        if i != " ":
            tempSp += i

    exp = tempSp
    stack = []
    x = 0
    obj = exprConv(len(exp))
    postfix = obj.infixToPostfix(exp)
    print("{0:^4s} | {1:^4s} | {2:^4s}".format('op', 'arg1', 'arg2'))
    for i in postfix:
        if i.isalpha() or i.isdigit():
            stack.append(i)
        elif i == '-':
            op1 = stack.pop()
            stack.append("(%s)" % x)
            print("{0:^4s} | {1:^4s} | {2:^4s}".format(i, op1, ""))
            x = x + 1
            if stack != []:
                op2 = stack.pop()
                op1 = stack.pop()
                print("{0:^4s} | {1:^4s} | {2:^4s}".format("+", op1, op2))
                stack.append("(%s)" % x)
                x = x + 1
        elif i == '=':
            op2 = stack.pop()
            op1 = stack.pop()
            print("{0:^4s} | {1:^4s} | {2:^4s}".format(i, op1, op2))
        else:
            op1 = stack.pop()
            if stack != []:
                op2 = stack.pop()
                print("{0:^4s} | {1:^4s} | {2:^4s}".format(i, op2, op1))
                stack.append("(%s)" % x)
                x = x + 1

#exp = input("Enter a valid infix expression  \n")

exp = 'x=(a^b)*c/d'

print("Three ADC : ")
ThreeADC(exp)
print("In quadruple form : ")
Quadruple(exp)
print("In Triplet form: ")
Triple(exp)
#--------------------------------

#SLr parsing technique


import sys

stack=[]
symbol=[]
inp=[]


mainList=[]
ruleList=[]
parseTable=[]
sr=[]
grammar=[]
filled=[]

def is_terminal(character):
	#check if input character is smaller letter of not
	if character.isupper():
		return False
	else:
		return True

def compute_first(X): # computing first for the grammar
	first = []	
	#if X=="":
	#	return X
	#print(X)
	if is_terminal(X):
			first.append(X)
			#print("here")
			return first

	for i in grammar:
		#print(X," loop ",i)
		#print(i[0])
		if i[0] == X:
			#print("here")
			if i[1] != i[0]: 
				next_term = i[1]
				if is_terminal(next_term):
					# print "here"
					if not(next_term in first):
						first.append(next_term)
				else:
					p=compute_first(next_term)
					for q in p:
						if not(q in first):
							first.append(q)
	return first

def compute_follow(X): #calculating follow 
	follow = []
	if X == grammar[0][1]:
		follow.append('$')
		#return follow
	for j in grammar:	
		if X in j[1:]:
			for i in range(0,len(j[1:])):
				if X == j[1:][i]:
					# print X, i.index(X), len(i)
					#print(j," ::: ",j[1:].index(X)," ::: ",X)
					if i == len(j[1:])-1:
						# print "lst"
						if not j[0] == X:
							temp_follow = compute_follow(j[0])
							# print temp_follow
							for k in temp_follow:
								if not(k in follow):
									follow.append(k)
						continue

					temp_first = compute_first(j[1:][i+1])				
					#print(temp_first)
					for k in temp_first:
						if not (k in follow):
							follow.append(k)
	return follow


def shift(per,i):
	stack.append(int(per[1:]))
	symbol.append(i)
	print('Current Stack : ',stack)	


def rduce(per,rl,alpha,table):
	r=int(per[1:])
	print("S"+str(per[1:]))
	rule=rl[r]
	r1=rule.split(':')[1].strip()
	r1=r1.split(' ')
	l=len(r1)
	s=symbol[-l:]
	s=''.join(s)
	for i in range(0,l):
		stack.pop()	
		symbol.pop()
		print(symbol, end="\t")
	sym=rule.split(':')[0]
	symbol.append(sym)
	index=alpha.index(sym)
	a=table[stack[-1]][index]
	stack.append(a)
	print('Current Stack : ',stack)
    
    
def parse(inpt,table,alpha,rl):
	i = int(alpha.index('$')+1)
	term = alpha[0:i]
	l = len(term)
	inp = inpt.strip().split(' ')
	inp.append('$')
	for i in inp:
		if i not in term:
			print("Inalid input:",i)
			exit(0)
	stack.append(0)
	try:
		i=0
		
		while i<len(inp):
			inpt=inp[i]
			index=term.index(inpt)
			per=table[stack[-1]][index]
			if per=='accept':
				print('SLR Parsing successful.')	
				break
			elif per[0]== 's':
				print("Shift", end='\t')
				shift(per,inpt)
				i+=1
			elif per[0]== 'r':
				print("reduce", end='\t')
				rduce(per,rl,alpha,table)	
			print("\n")
	except:
		print('Invalid input. SLR parsing failed')
		exit(0)
        
        


def alphabet():
	alpha=[]
	for gra in ruleList:
		#print(gra)
		gra=gra.split(':')[1].strip()
		#print(gra)
		l=gra.split(' ')
		#print(l)
		for i in l:
			if i not in alpha:
				if i.isupper():
					alpha.append(i)								
				else:
					alpha.insert(0,i)
	return alpha

def div():
	for x in ruleList:
		l=x.split(' ')
		l[0]=l[0].strip(':')
		grammar.append(l)
	return 

def L0Sets(alpha):
	
	I0=[ruleList[0]]
	I0=appendS(I0)	
	mainList.append(I0)
	i=0;
	while i<len(mainList):
		state(mainList[i],alpha)
		i+=1
	slrptable(alpha)
	

def state(I,alpha):
	l=[]
    
	for a in alpha:
		subl=[]
		f=0
		for r in I:
			if r.split(':')[1].strip().split(' ')[0]==a:
				if a == '$':
				        f=1
				elif r in ruleList:
					s=r.split(':')[0]+': '+' '.join(r.split(' ')[2:])+' /{}'.format(ruleList.index(r))
					subl.append(s)
				else:
					s=r.split(':')[0]+': '+' '.join(r.split(' ')[2:])
					subl.append(s)				
				
		if len(subl)>0:
			subl=appendS(subl)		
			if subl not in mainList:			
				mainList.append(subl)

		if f==0:
			l.append(subl)
		else:
			l.append(['A'])
						
	ptable(l,alpha)
	

def ptable(l,alpha):
	p=len(parseTable)
	parseTable.append([])
	filled.append([])
	if all(i==[] for i in l):
		rule=mainList[p][0]
		rule=rule.split('/')[1].strip()
		for i in range(0,len(alpha)):
			lst = compute_follow(grammar[int(rule)][0])
			#print(lst)
			if len(parseTable[p])<(alpha.index('$')+1):
				#print(alpha[len(parseTable[p])])
				if alpha[len(parseTable[p])] in lst:
					parseTable[p].append('r'+rule)
					filled[p].append(2);
				else:
					parseTable[p].append(0)
					filled[p].append(0);
			else:
				parseTable[p].append(0)
				filled[p].append(0);
	else:
		for i in l:			
			if i == ['A']:
				parseTable[p].append('accept')
			elif i == []:
				parseTable[p].append(0)
				filled[p].append(0);
			else:
				if len(parseTable[p])<(alpha.index('$')+1):
					parseTable[p].append('s'+str(mainList.index(i)))
					filled[p].append(1);
				else:
					parseTable[p].append(mainList.index(i))
					filled[p].append(0);

		
def slrptable(alpha):
	for st in mainList:
		flag=0
		cnt=[]
		for s in st:
			if s.split(':')[1].split('/')[0].strip()=='':
				rule=s.split('/')[1]
				flag=1
				#print(mainList.index(st))
				#print(ruleList[int(rule)])
				#break;
				cnt.append(rule)
		if(flag==1):
			for x in cnt:
				lst = compute_follow(grammar[int(x)][0])
				for i in range(0,((alpha.index('$')+1))):
					if alpha[i] in lst:
						if filled[mainList.index(st)][i] == 0:
							parseTable[mainList.index(st)][i]='r'+x

def appendS(s):
	for j in range(1,len(ruleList)):
			i=s[(len(s)-1)]
			a=i.split(':')[1].strip()
			a=a.split(' ')[0]
			for r in ruleList:
				if r.split(':')[0].strip() == a:
					s.append(r)
	return s
	

def main():
	r=0
	f=open('grammar2.txt','r')
	rule=f.readline()
	while rule:
		r+=1
		rule=rule.strip()
		ruleList.append(rule)
		rule=f.readline()
	s=''.join(['S1: ',ruleList[0].split(':')[0].strip(),' $'])
	ruleList.insert(0,s)
	print("\nGrammer list:",ruleList)
	div()
	alpha=alphabet()
	print("\nTerminal and nonterminal:",alpha)

	L0Sets(alpha)
	print("\nStates:")
	j=0
	for i in mainList:
		print("I{}: ".format(j),i)
		j+=1
		
	print("\nParsing Table:\n")
	j=0
	print("\t\t",end="")
	for ele in alpha:
		print(ele,"\t",end="")
		
	print()
	print("******************************************** ")

	for i in parseTable:
		print("{}\t|\t".format(j),end="")
		for ind in i:
			if ind == 0:
				ind =""
			print(ind,"\t",end="")
		#print("{}\t|\t".format(j),i)
		print()
		print("----------------------------------------------")
		j+=1
	
	inpt=input("Enter string to be parsed  (Ex: id * id)):\n")
	parse(inpt, parseTable, alpha, ruleList)

num=0
main()

input file :
E: E + T
E: T
T: T * F
T: F
F: ( E )
F: id
