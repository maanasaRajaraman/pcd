#compiler Design
#removal of left recursion
'''
def isTerm(ter):
    if ter == '#':
        return True

    for t in terms:
        if ter == t:
            return True

    return False


def isNTerm(nT):
    for nt in nonterms:
        if nT == nt:
            return True
    return False


def LeftCheck(nT, search, escape):
    for prod in production_dict[nT]:
        if search == prod[0]:
            leftcheck_list[search].append(nT)
            return True
        else:
            if isNTerm(prod[0]):
                return LeftCheck(prod[0], search, escape+1)
            else:
                escape = 0
                continue
    return False


def RightCheck(nT, search):
    # print("NT:-"+nT+",Search:-"+search)
    for prod in production_dict[nT]:
        if search == prod[len(prod)-1]:  # Direct
            return True
    return False


def Left_toRight(nT):
    bet = []
    alpha = []
    #expand on indirect relations
    for nont in leftcheck_list[nt]:
        if nont != nT:
            for i in range(0, len(production_dict[nT])):
                prod = production_dict[nT][i]
                if(nont == prod[0]):
                    prod_temp = prod
                    remain = prod[1:]
                    for p in production_dict[nont]:
                        if nT == p[0]:
                            final_prod = p + remain
                            production_dict[nT].pop(i)
                            production_dict[nT].insert(i, final_prod)

    #remove Direct Left recursion
    for prd in production_dict[nT]:
        if nT == prd[0]:
            alpha.append(prd[1:])
        else:
            bet.append(prd)

    gram_dash = ""
    for a in alpha:
        gram_dash = gram_dash + a + nT + '\'' + "/"
    gram_dash = gram_dash[0:-1]
    gram = ""
    for b in bet:
        gram = gram+b+nT+'\''+"/"
    gram = gram[0:-1]
    print(nT+"->"+gram)
    print(nT+"\'->"+gram_dash+"/#")


def Prod_print(nT):
    full_prod = ""
    for pd in production_dict[nT]:
        full_prod = full_prod+pd+"/"
    full_prod = full_prod[0:-1]
    print(nT+"->"+full_prod)


productions = []

n = input("Enter number of Productions ")

n = int(n)
#print("\nRules:\n--------------------------------------------------------------------------------------\nEpsilon is represented by  # \nProductions are of the form A->B, where ‘A’ is a single Non-Terminal and ‘B’ can be any combination of Terminals and Non - Terminals.\nTerminals with only single characters work\nDO NOT use the same char for terminal and non terminal.\nDo not use # or $ as they are reserved for special purposes.\n\n")

for i in range(n):
    prod = input()
    prod.strip()
    productions.append(prod)

nonterms = []
terms = []

for i in range(n):
    nonterms.append(productions[i][0])

for i in productions:
     for j in range(3, len(i)):
          check = True
          for nt in nonterms:
              if i[j] == nt or i[j] == '#' or i[j] == '/':
                  check = False
          if check:
              terms.append(i[j])

print("Non Terminals : ", nonterms)
print("Terminals : ", terms)
print("Productions : ", productions)

#Production Dict
production_dict = {}
for nt in nonterms:
    production_dict[nt] = []

# split the productions into parts to simplify parsing
for production in productions:
    nonterminal_to_production = production.split("->")
    expanded = nonterminal_to_production[1].split(
        "/")  # assumption : single char terminals
    for ex in expanded:
        production_dict[nonterminal_to_production[0]].append(ex)

print("Dict of Productions : ", production_dict)


leftcheck_dict = {}
leftcheck_list = {}
for nt in nonterms:
    leftcheck_list[nt] = []
    leftcheck_dict[nt] = LeftCheck(nt, nt, 0)

rightcheck_dict = {}

for nt in nonterms:
    rightcheck_dict[nt] = RightCheck(nt, nt)

print("\n")
for nt in nonterms:
    if leftcheck_dict[nt]:
        print(nt+" contains Left Recursive Grammar")
    if rightcheck_dict[nt]:
        print(nt+" contains Right Recursive Grammar")

print("\n Grammar after removing Left recursion : ")
for nt in nonterms:
    if leftcheck_dict[nt] == True:
        Left_toRight(nt)
    else:
        Prod_print(nt)
'''
#First and Follow 
'''
def First(string):
    #print("first({})".format(string))
    first_ = set()
    if string in nonterminals:
        alternatives = production_dict[string]

        for alternative in alternatives:
            first_2 = First(alternative)
            first_ = first_ | first_2

    elif string in terminals:
        first_ = {string}

    elif string == '' or string == '#':
        first_ = {'#'}

    else:
        first_2 = First(string[0])
        if '#' in first_2:
            i = 1
            while '#' in first_2:
                

                first_ = first_ | (first_2 - {'@'})
                
                if string[i:] in terminals:
                    first_ = first_ | {string[i:]}
                    break
                elif string[i:] == '':
                    first_ = first_ | {'@'}
                    break
                first_2 = First(string[i:])
                first_ = first_ | first_2 - {'@'}
                i += 1
        else:
            first_ = first_ | first_2

    
    return first_


def Follow(nT):
    
    follow_ = set()
    
    prods = production_dict.items()
    if nT == start_symbol:
        follow_ = follow_ | {'$'}
    for nt, rhs in prods:
        
        for alt in rhs:
            for char in alt:
                if char == nT:
                    following_str = alt[alt.index(char) + 1:]
                    if following_str == '':
                        if nt == nT:
                            continue
                        else:
                            follow_ = follow_ | Follow(nt)
                    else:
                        follow_2 = First(following_str)
                        if '#' in follow_2:
                            follow_ = follow_ | follow_2-{'#'}
                            follow_ = follow_ | Follow(nt)
                        else:
                            follow_ = follow_ | follow_2
    
    return follow_


print("\nEpsilon is represented by # ")


number_of_terminals = int(input("Enter the number of terminals : "))
terminals = []
print("Enter the terminals : ")
for i in range(number_of_terminals):
    terminals.append(input())

number_of_nonterminals = int(input("Enter the number of non terminals : "))
nonterminals = []
print("Enter the non terminals : ")
for j in range(number_of_nonterminals):
    nonterminals.append(input())

start_symbol = input("Enter the start symbol : ")
production_count = int(input("Enter the number of productions : "))
productions = []
print("Enter the productions : ")
for k in range(production_count):
    productions.append(input())

# input testing --------(remove while cleaning)
print("terminals : ",terminals)
print("non terminals : ",nonterminals)
print("productions : ",productions)

# enable the dict to hold lists
production_dict = {}
for nt in nonterminals:
    production_dict[nt] = []

# split the productions into parts to simplify parsing
for production in productions:
    nonterminal_to_production = production.split("->")
    expanded = nonterminal_to_production[1].split("/") # assumption : single char terminals
    for ex in expanded:
        production_dict[nonterminal_to_production[0]].append(ex)


# -----(remove while cleaning)
print("production_dict",production_dict)

# declare dicts for first and follow as they are set of elements mapped to keys(non terminals)
FIRST = {}
FOLLOW = {}

for nonterminal in nonterminals:
    FIRST[nonterminal] = set()
    FOLLOW[nonterminal] = set()

for nonterminal in nonterminals:
    FIRST[nonterminal] = FIRST[nonterminal] | First(nonterminal)

FOLLOW[start_symbol]=FOLLOW[start_symbol] | {'$'}
for non_terminal in nonterminals:
    FOLLOW[non_terminal] = FOLLOW[non_terminal] | Follow(non_terminal)

print("{: ^20}{: ^20}{: ^20}".format('Non Terminals', 'First', 'Follow'))
for non_terminal in nonterminals:
    print("{: ^20}{: ^20}{: ^20}".format(non_terminal, str(
        FIRST[non_terminal]), str(FOLLOW[non_terminal])))
    
    
'''

#Predictive Parser  
'''
def print_iter(Matched,Stack,Input,Action,verbose=True):
    if verbose==True:
        print(".".join(Matched).ljust(30)," | ",".".join(Stack).ljust(25)," | ",".".join(Input).ljust(30)," | ",Action)
#The predictive parsing algorithm
def predictive_parsing(sentence,parsingtable,terminals,start_state="S",verbose=True):      #Set verbose to false to not see the stages of the algorithm
    status = None
    match = []
    stack = [start_state,"$"]
    Inp = sentence.split(".")
    if verbose==True:
        print_iter(["Matched"],["Stack"],["Input"],"Action")
    print_iter(match,stack,Inp,"Initial",verbose)
    action=[]
    while(len(sentence)>0 and status!=False):
        top_of_input = Inp[0]
        pos = top_of_input
        if stack[0] =="$" and pos == "$" :
            print_iter(match,stack,Inp,"Accepted",verbose)
            return "Accepted"
        if stack[0] == pos:
            print_iter(match,stack,Inp,"Pop",verbose)
            match.append(stack[0])
            del(stack[0])
            del(Inp[0])
            continue
        if stack[0]=="epsilon":
            print_iter(match,stack,Inp,"Poping Epsilon",verbose)
            del(stack[0])
            continue
        try:
            production=parsingtable[stack[0]][pos]
            print_iter(match,stack,Inp,stack[0]+" -> "+production,verbose)
        except:
            return "error for "+str(stack[0])+" on "+str(pos),"Not Accepted"

        new = production.split(".")   
        stack=new+stack[1:]
    return "Not Accepted"

if __name__=="__main__":
    #Example for the working of the predictive parsing :-
    #input for the grammar : E->TE1;E1->+TE1|epsilon;T->FT1 ...
    parsingtable = {
    "E" : {"id" : "T.E1", "(" : "T.E1"},
    "E1" : {"+":"+.T.E1", ")":"epsilon", "$" : "epsilon"},
    "T" : {"id" : "F.T1", "(" : "F.T1" },
    "T1" : {"+" : "epsilon", "*" : "*.F.T1", ")" : "epsilon", "$" : "epsilon"},
    "F":{"id":"id","(":"(.E.)"}
    }
    terminals = ["id","(",")","+","*"]
    print(predictive_parsing(sentence="id.+.(.id.+.id.).$",parsingtable=parsingtable,terminals=terminals,start_state="E",verbose=True))
    #Another Example done in class:-
    print(predictive_parsing(sentence="c.c.c.c.d.d.$",parsingtable={"S" : {"c":"C.C","d":"C.C"},"C":{"c":"c.C","d":"d"}},terminals=["c,d"],start_state="S"))
    
'''

#Slr parser
'''
from collections import *

file=open("slr.txt","r")

accept_flag=False
non_terminals=[]
terminals=[]
handles=[]
initial_production={}
productions=defaultdict(list)
start_symbol=""

for line in file:
  stripped=line.strip()
  if("start" in line):
    splitted=stripped.split()
    start_symbol=splitted[1]
    continue

  if ("terminals" in line):
    splitted=line.split()
    lis=splitted[1]
    new_lis=lis[1:-1]
    final_lis=new_lis.split(',')
    terminals.extend(final_lis)
    continue

  splitted=stripped.split("->")
  print(splitted)
  left=splitted[0]
  if(left not in non_terminals):
    non_terminals.append(left)

  right=splitted[1]
  productions[left].append(right)
  if left==start_symbol:
    handles.append(right)

print("\n\n")
print("start_symbol:",start_symbol)
print("\nproductions:",productions)
print("\nnonterminals:",non_terminals)
print("\nterminals: ",terminals)
print("\nhandles: ", handles)

input_string=input("\nEnter the string to be parsed: ")

input_buffer=deque()
for c in input_string:
  input_buffer.append(c)
input_buffer.append('$')
stack=[]

print("\n\n")
print("stack\t\t\tinput_buffer\t\t\taction")
print("\n")

stack.append('$')

print(stack,end='\t\t\t')
print(list(input_buffer),end='\t\t')
print("shift")

stack.append(input_buffer.popleft())

end_stack=['$',start_symbol]
end_buffer=['$']

while(input_buffer):
  st=""
  end_ind=len(stack)
  i=len(stack)-1
  while(i!=0):
      st+=stack[i]
      if(st in handles):
        start_ind=i
        print(stack,end='\t\t')
        stack[start_ind:end_ind]=start_symbol
        i=len(stack)-1

        print(list(input_buffer),end='\t\t')
        print("reduce E->",st)
        st=""
        print("\n")

      else:
        i-=1

  if(stack==end_stack and list(input_buffer)==end_buffer):
    accept_flag=True
    print(stack,end="\t\t\t")
    print(list(input_buffer),end="\t\t\t")
    print("Accept")
    break

  print(stack,end='\t\t')
  print(list(input_buffer),end='\t\t')
  print("shift")
  stack.append(input_buffer.popleft())

if(accept_flag==False):
  print("\n\n\t\tString not accepted !")

#slr.txt
start E 
E->E+E 
E->E-E 
E->E*E 
E->E/E 
E->i 
terminals [+,-,*,/,i]

# "slr.txt" :  input->"i+i+i"
# "slr2.txt":  input->"32423"
'''

#operator precedence
'''
import numpy as np 

f = open('opInput.txt',"r")
lines = f.readlines()
n = []
for l in lines:
    l = l.split("\n")
    for i in l:
        i=i.split(" ")
        if len(i)>1:
            n.append(i)

prList = list('(/*%+-)')

inputStr = list(input("Enter String to be parsed : "))
inputStr.append("$")
s = [None]*len(inputStr)
q = 0
s.insert(q, "$")
x = [row[0] for row in n]
y = list(n[0])
h = 0
sLen = len(inputStr) 
action = ''
while(s[0] != s[1]):
    print(s, action)
    if (inputStr[sLen-2] in prList):
        break
    elif ((s[q] in x) and (inputStr[h]in y )):
        if (n[x.index(s[q])][y.index(inputStr[h])] == "<"):
            q += 1
            s.insert(q, inputStr[h])
            h += 1
            action = 'Shift'
        elif (n[x.index(s[q])][y.index(inputStr[h])] == ">"):
            s.pop(q)
            q -= 1
            action = 'Reduce Handle'
        elif((n[x.index(s[q])][y.index(inputStr[h])]=='.')and ((s[q]=="$") and (inputStr[h]=="$"))):
            s[1] = s[0]
            action = 'Accept'
    else:
        break
    #print(s, action)
if(s[0]!=s[1]):
    print("Invalid String ")
else: 
    print("Valid String ")

trList = list('.k-*$')
fnDict = {}
for i in trList:
    if i != '.':
        fnDict['f'+str(i)] = []
        fnDict['g'+str(i)] = []

for i in range(1, len(n)):
    string = ''
    for j in range(0, len(n)):
        #print(n[i][j], end='\t')
        string += n[i][j] + " "
    #print(string)
    string = string.split(" ")
    term = string[0]
    for x in range(1, len(string)):

        if string[x] == '>':
            fnDict['f'+term].append('g'+trList[x])
        elif string[x] == '<':
            fnDict['g'+trList[x]].append('f'+term)

for f in fnDict.keys():
    print(f, '\t', fnDict[f])
    '''
    
#left factoring
from itertools import takewhile

s= "S->abA|acA|adB|aeB"

def groupby(ls):
    d = {}
    ls = [ y[0] for y in rules ]
    initial = list(set(ls))
    for y in initial:
        for i in rules:
            if i.startswith(y):
                if y not in d:
                    d[y] = []
                d[y].append(i)
    return d

def prefix(x):
    return len(set(x)) == 1


starting=""
rules=[]
common=[]
alphabetset=["A'","B'","C'","D'","E'","F'","G'","H'","I'","J'","K'","L'","M'","N'","O'","P'","Q'","R'","S'","T'","U'","V'","W'","X'","Y'","Z'"]
s = s.replace(" ", "").replace("	", "").replace("\n", "")

while(True):
    rules=[]
    common=[]
    split=s.split("->")
    starting=split[0]
    for i in split[1].split("|"):
        rules.append(i)

#logic for taking commons out
    for k, l in groupby(rules).items():
        r = [l[0] for l in takewhile(prefix, zip(*l))]
        common.append(''.join(r))
#end of taking commons
    for i in common:
        newalphabet=alphabetset.pop()
        print(starting+"->"+i+newalphabet)
        index=[]
        for k in rules:
            if(k.startswith(i)):
                index.append(k)
        print(newalphabet+"->",end="")
        for j in index[:-1]:
            stringtoprint=j.replace(i,"", 1)+"|"
            if stringtoprint=="|":
                print("\u03B5","|",end="")
            else:
                print(j.replace(i,"", 1)+"|",end="")
        stringtoprint=index[-1].replace(i,"", 1)+"|"
        if stringtoprint=="|":
            print("\u03B5","",end="")
        else:
            print(index[-1].replace(i,"", 1)+"",end="")
        print("")
    break

#op
import numpy as np

def grammarcheck(i):
    print("Enter the ",str(i+1)+"th production : ")
    b = list(input().split("->"))
    f = list("abcdefghijklmnopqrstuvwxyz")

    if(b[0] == " " or b[0] == "" or b[0] in f or len(b)==1):
        return False
    else:
        b.pop(0)
        b = list(b[0])
        s = list("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
        o = list("(abcdefghijklmnopqrstuvwxyz^/*+-|)")
        sp = ['!','@','#','$','?','~','`',',',';',':','"','=','_','&',"'",""," "]
        for i in range(0, len(b), 2):
            if(b[i]==" "):
                g=False
            elif(b[i] in sp):
                g=False
                break
            elif(b[len(b)-1] in o and ((b[0]=="(" and b[len(b)-1]==")" ) or (b.count("(")==b.count(")")))):
                g=True
            elif(b[i] in f):
                g=True
            elif(b[len(b)-1] in o):
                g=False
            elif((i==len(b)-1) and (b[i] in s)):
                g=True
            elif((i==len(b)-1) and (b[i] not in s) and (b[i] in o)and b[i-1] in o):
                g=True
            elif((b[i] in s) and(b[i+1]in o)):
                g=True
            elif((b[i] in s) and (b[i+1] in s)):
                g=False
                break 
            else:
                g=False
                break
        if(g == True):
            return True
        else:
            return False

def stringcheck():
    a = list(input("Enter the operator, terminals : "))
    a.append('$')
    #print(a)
    l = list("abcdefghijklmnopqrstuvwxyz")
    op = list('(/*%+-)')
    prList = list('(/*%+-)')
    n = np.empty([len(a)+1,len(a)+1],dtype=str,order="C")
    for j in range(1, len(a)+1):
        n[0][j] = a[j-1]
        n[j][0] = a[j-1]    
    for i in range(1, len(a)+1):
        for j in range(1, len(a)+1):
            if((n[i][0] in l) and (n[0][j] in l)):
                n[i][j] = ""
            elif (n[i][0] in l):
                n[i][j] = ">"
            elif((n[i][0] in op) and (n[0][j] in op)):
                if(op.index(n[i][0]) <= op.index(n[0][j])):
                   n[i][j] = ">"
                else:
                    n[i][j] = "<"
            elif((n[i][0] in op) and n[0][j]in l):
                n[i][j] = "<"
            elif(n[i][0]=="$" and n[0][j]!="$"):
                n[i][j] = "<"
            elif(n[0][j]=="$" and n[i][0]!="$" ):
                 n[i][j] = ">"
            else:
                break
    print("Operator Precedence Relational Table: \n")
    print(n)
    inputStr = list(input("Enter String to be parsed : "))
    inputStr.append("$")
    s = [None]*len(inputStr)
    q = 0
    s.insert(q, "$")
    x = [row[0] for row in n]
    y = list(n[0])
    h = 0
    sLen = len(inputStr) 
    action = ''
    while(s[0] != s[1]):
        print(s, action)
        
        if (inputStr[sLen-2] in prList):
            break
        elif ((s[q] in x) and (inputStr[h]in y )):
            if (n[x.index(s[q])][y.index(inputStr[h])] == "<"):
                q += 1
                s.insert(q, inputStr[h])
                h += 1
                action = 'Shift'
            elif (n[x.index(s[q])][y.index(inputStr[h])] == ">"):
                s.pop(q)
                q -= 1
                action = 'Reduce Handle'
            elif((n[x.index(s[q])][y.index(inputStr[h])]=='')and ((s[q]=="$") and (inputStr[h]=="$"))):
                s[1] = s[0]
                action = 'Accept'
        else:
            break
        #print(s, action)
    if(s[0]!=s[1]):
        return False
    else: 
        return True

c=int(input("Enter number of productions : "))
for i in range(c):
    if(grammarcheck(i)):
        flag = True
    else:
        flag = False
        break
if (flag):
    print("Grammar is accepted")
    if(stringcheck()):
        print("String parsed sucessfully")
    else:
        print("String is not accepted")
        
else:
    print("Grammar is not accepted ")
